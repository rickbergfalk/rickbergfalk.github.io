{"data":{"site":{"siteMetadata":{"title":"sql-in-js","author":"Rick Bergfalk"}},"markdownRemark":{"id":"cbb29a81-084b-52ec-a11f-0913de35923a","excerpt":"This post is part of a series detailing the work involved to slim down SQLPad’s JavaScript bundle size. Read the introductory post.First some love for…","html":"<p><em>This post is part of a series detailing the work involved to slim down SQLPad’s JavaScript bundle size. <a href=\"/20190428-bundle-battle/\">Read the introductory post</a>.</em></p>\n<h2>First some love for antd</h2>\n<p>Before getting into this one I want to express some appreciation for <a href=\"https://ant.design/\">Ant Design</a> and antd.</p>\n<p>antd is an amazing component library. Of the various React component libraries out there, My favorite at the moment is antd. It has a nice balance of having a modern clean look without being too flat. It has a nice density about it, making it a great pick for more enterprisey applications. The components were a pleasure to work with.</p>\n<p>And there are so many components. <a href=\"https://ant.design/components/cascader/\">Cascading selections</a> and <a href=\"https://ant.design/components/steps/\">steps</a> and <a href=\"https://ant.design/components/auto-complete/\">AutoCompletes</a> and <a href=\"https://ant.design/components/mention/\">mentions</a> and <a href=\"https://ant.design/components/select/\">selects with tag modes</a> and <a href=\"https://ant.design/components/calendar/\">a calendar</a> and <a href=\"https://ant.design/components/tree/\">trees</a> and <a href=\"https://ant.design/components/timeline/\">timelines</a> and <a href=\"https://ant.design/components/drawer/\">drawers</a> and my favorite <a href=\"https://ant.design/components/modal/\">modals that animate open from the click location</a>.</p>\n<p>If you need a component, antd probably already has it.</p>\n<p>Unfortunately all that comes with the cost of a larger JavaScript bundle.</p>\n<p>When I set out to update SQLPad’s UI, I initially decided on antd because I wanted a library that had everything. I wanted the design to be cohesive, and I wanted it to be easy for others to expand on the UI if necessary. Instead of dealing with a random assortment of components I built, someone could simply take from the component library of antd.</p>\n<p>I think that’s a great benefit for a project, but I’m not sure if it is worth the cost for SQLPad.</p>\n<p>I ended up building my own tree and table components, and the other main component experiences are a code editor and a charting library which are also not from antd.</p>\n<p>I should have maybe thought about this a bit more before taking on a UI component conversion, but my component needs are pretty basic. Buttons, inputs, modals, toasts, and some tabs… I’m set. I don’t need a lot of the fancy antd components listed above. For those I do need, I can expand on some primitive react UI libraries like <a href=\"https://ui.reach.tech/\">Reach UI</a> and <a href=\"https://github.com/downshift-js/downshift\">downshift</a> and still keep the bundle small.</p>\n<h2>Removing antd</h2>\n<p>This part sucked because I spent a long time refactoring the previous solution and altering the design of SQLPad to fit to antd components. If it weren’t for the self challenge to shrink the JS bundle I would not have put myself through this activity. On the upside, all that refactoring helped make the transition to something else a bit easier.</p>\n<p>antd uses old-fashioned CSS to style its components. I decided to copy the pieces of style I like for components like buttons and inputs and use that as a base style to build on. With CSS module support in create-react-app 2+ I figured I’d give css modules a shot too.</p>\n<p>And now for some random thoughts on how things went.</p>\n<h3>Buttons</h3>\n<p>The Button component was the first to convert. It invovled wrapping a regular html button with some css and logic around when to use what class. The CSS ripped from antd and lightly modified.</p>\n<p>Its initial component implementation looked like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Button.module.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> classNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>styles<span class=\"token punctuation\">.</span>btn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span>primary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"danger\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span>danger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classNames<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So easy!</p>\n<p>Or is it? It wasn’t long until I started having a lot of styles copied across components (primary/danger styles for example). Then with the introduction of reach tooltip, I ran into smaller nuanced edge cases that needed to be addressed.</p>\n<p>The Reach tooltip component passes on a ref to its child component for positioning, but since I am using functional components this means I had to wrap my component function in <code class=\"language-text\">React.forwardRef</code>. It is kind of an ugly thing to have to do and a bit of a pain. Suddenly your app is breaking and react is warning you about this which is nice, but I’m curious as to why functional components just don’t always take ref as a second argument?</p>\n<p>Then using the application teased out issues with tooltips on hover of disabled buttons. A quick googling brought me to an <a href=\"https://getbootstrap.com/docs/4.0/components/tooltips/#disabled-elements\">explanation of why by Bootstrap</a></p>\n<p>Instead of getting hover tooltips on disabled buttons I just opted to not show the tooltip. Handling this case influenced my component API though in ways I haven’t given much thought to in the past though. Up until this point I was using my Tooltip and Button components separately:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Tooltip label<span class=\"token operator\">=</span><span class=\"token string\">\"helpful tip\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Button disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>disabled<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>my button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Tooltip<span class=\"token operator\">></span></code></pre></div>\n<p>This worked well for ad-hoc building of things but there’s no way I wanted to</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Button.module.css\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Tooltip <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Tooltip\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ICON_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> icon<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> htmlType<span class=\"token punctuation\">,</span> tooltip<span class=\"token punctuation\">,</span> disabled<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ref</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> classNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>styles<span class=\"token punctuation\">.</span>btn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span>primary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"danger\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span>danger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>button\n        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span>\n        className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classNames<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>htmlType<span class=\"token punctuation\">}</span>\n        disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>disabled<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>icon <span class=\"token operator\">&amp;&amp;</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>icon<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token constant\">ICON_SIZE</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span>children <span class=\"token operator\">&amp;&amp;</span> icon <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// If the button is disabled the tooltip gets weird on hover</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tooltip <span class=\"token operator\">||</span> disabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> button<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Tooltip label<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tooltip<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>button<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Tooltip<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Select</h3>\n<p>For the Select component, I’ve opted to just use the standard HTML select components, and deal with the fact that the options <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Styling_with_CSS\">won’t match the rest of the design</a>.</p>\n<h2>TO BE CONTINUED…</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">              bundle  ~2.58 MB\n-               antd  ~?.?? MB\n+       ?? ??? ?????  ~?.?? MB\n-------------------------------\n          new bundle  ~?.?? MB</code></pre></div>","frontmatter":{"title":"Bundle Battle 3 - antd","date":"April 30, 2019","description":"The one where I forgot what its like to write html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/20190430-bundle-battle-3/","previous":{"fields":{"slug":"/20190429-bundle-battle-2/"},"frontmatter":{"title":"Bundle Battle 2 - react-virtualized, react-window"}},"next":null}}